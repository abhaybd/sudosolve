{"version":3,"sources":["App.js","x-square-fill.svg","solver.worker.js","reportWebVitals.js","index.js"],"names":["worker","Worker","__webpack_public_path__","options","i","push","Cell","props","row","col","value","classes","sqrSize","Math","sqrt","size","className","join","type","onChange","e","cellChanged","target","disabled","toString","copyBoard","board","newBoard","newRow","cell","Content","createNewBoard","j","useState","setSize","setBoard","calculating","setCalculating","visualize","setVisualize","charMap","String","fromCharCode","charCodeAt","solveBoard","callback","disableInput","onmessage","event","data","copy","postMessage","getRandomInt","max","floor","random","toUpperCase","index","undefined","id","map","checked","val","onClick","response","alert","acceptableVals","Object","keys","filter","c","a","length","splice","App","showInstructions","setShowInstructions","instructionsPanel","alt","src","closeSvg","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff938499.chunk.js","sourcesContent":["import './App.css';\r\nimport React, {useState} from \"react\";\r\nimport Worker from \"./solver.worker.js\";\r\nimport closeSvg from \"./x-square-fill.svg\";\r\n\r\n// This is the web worker for solving the board\r\nconst worker = Worker();\r\n\r\n// these are the min and max square roots of the min and max sizes\r\nconst minSize = 2;\r\nconst maxSize = 5;\r\n\r\n// populate the options list\r\nconst options = [];\r\nfor (let i = minSize; i <= maxSize; i++) {\r\n    options.push(i * i);\r\n}\r\n\r\n/**\r\n * Represents an individual cell in the sudoku board.\r\n *\r\n * @param props The options for this element. row is the row. col is the column. value is the string content of the cell.\r\n * size is the size of the board. cellChanged is a callback function that accepts (row, col, value).\r\n * disabled may optionally be defined. If it's defined, this cell will be disabled.\r\n * @returns {JSX.Element} The element for display.\r\n * @constructor\r\n */\r\nfunction Cell(props) {\r\n    let row = props.row;\r\n    let col = props.col;\r\n    let value = props.value;\r\n\r\n    let classes = [];\r\n    const sqrSize = Math.sqrt(props.size);\r\n    // if the cell is on the horizontal border between sub-grids, mark it as such\r\n    if (row !== 0 && row % sqrSize === 0) {\r\n        classes.push(\"border-row\");\r\n    }\r\n    // if the cell is on the vertical border between sub-grids, mark it as such\r\n    if (col !== 0 && col % sqrSize === 0) {\r\n        classes.push(\"border-col\");\r\n    }\r\n\r\n    // If this cell has some content in it, mark it as filled\r\n    if (value && value !== \"\") {\r\n        classes.push(\"filled\");\r\n    }\r\n\r\n    const className = classes.join(\" \");\r\n\r\n    return <input type=\"text\"\r\n                  className={className}\r\n                  key={row.toString() + \",\" + col.toString()}\r\n                  onChange={e => props.cellChanged(row, col, e.target.value)}\r\n                  value={value}\r\n                  disabled={props.disabled}/>;\r\n}\r\n\r\n/**\r\n * Create a deep copy of this sudoku board.\r\n *\r\n * @param board The board to copy.\r\n * @returns {[]} A deep copy of the supplied board.\r\n */\r\nfunction copyBoard(board) {\r\n    const newBoard = [];\r\n    for (let row of board) {\r\n        const newRow = [];\r\n        for (let cell of row) {\r\n            newRow.push(cell);\r\n        }\r\n        newBoard.push(newRow);\r\n    }\r\n    return newBoard;\r\n}\r\n\r\n/**\r\n * Creates the content element for the webpage.\r\n *\r\n * @returns {JSX.Element} The element for display.\r\n * @constructor\r\n */\r\nfunction Content() {\r\n    /**\r\n     * Create a new empty board of the specified size.\r\n     *\r\n     * @param size The size of the new board.\r\n     * @returns {[]} The newly created board.\r\n     */\r\n    function createNewBoard(size) {\r\n        const board = [];\r\n        for (let i = 0; i < size; i++) {\r\n            const row = [];\r\n            for (let j = 0; j < size; j++) {\r\n                row.push(\"\");\r\n            }\r\n            board.push(row);\r\n        }\r\n        return board;\r\n    }\r\n\r\n    // create the initial states of the component.\r\n    const [size, setSize] = useState(9);\r\n    const [board, setBoard] = useState(createNewBoard(size));\r\n    const [calculating, setCalculating] = useState(false);\r\n    const [visualize, setVisualize] = useState(false);\r\n\r\n    const charMap = {\"\": 0};\r\n    for (let i = 1; i <= size; i++) {\r\n        if (i < 10) {\r\n            charMap[i] = i;\r\n        } else {\r\n            // subtract 10 is necessary because 10=>A, 11=>B, etc.\r\n            charMap[String.fromCharCode(\"A\".charCodeAt(0) - 10 + i)] = i;\r\n        }\r\n    }\r\n\r\n    function solveBoard(board, callback, disableInput = true, visualize = false) {\r\n        worker.onmessage = function (event) {\r\n            if (event.data.type === \"solution\" && disableInput === true) {\r\n                setCalculating(false);\r\n            }\r\n            callback(event.data);\r\n        }\r\n\r\n        if (disableInput) {\r\n            setCalculating(true);\r\n        }\r\n        const copy = copyBoard(board);\r\n        worker.postMessage({board: copy, charMap: charMap, visualize: visualize});\r\n    }\r\n\r\n    /**\r\n     * Creates a random board that is guaranteed to be solvable. Automatically renders the board after creation.\r\n     * Runs asynchronously.\r\n     */\r\n    function createRandomBoard() {\r\n        let board = createNewBoard(size);\r\n        let acceptableVals = [...Object.keys(charMap)].filter(c => c !== '');\r\n        for (let i = 0; i < size; i++) {\r\n            let a = getRandomInt(acceptableVals.length);\r\n            board[0][i] = acceptableVals[a];\r\n            acceptableVals.splice(a, 1);\r\n        }\r\n\r\n        solveBoard(board, function (response) {\r\n            if (response.type === \"solution\" && response.board !== null) {\r\n                let copy = response.board;\r\n                for (let i = 0; i < size; i++) {\r\n                    for (let j = 0; j < size; j++) {\r\n                        if (getRandomInt(10) < 5) {\r\n                            copy[i][j] = \"\";\r\n                        }\r\n                    }\r\n                }\r\n                setBoard(copy);\r\n            }\r\n        });\r\n    }\r\n\r\n    function getRandomInt(max) {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n\r\n    /**\r\n     * Solve the current board asynchronously, and populate the board with the solution when done.\r\n     */\r\n    function calculate() {\r\n        solveBoard(board, function (response) {\r\n            if (response.type === \"solution\") {\r\n                if (response.board) {\r\n                    setBoard(response.board);\r\n                } else {\r\n                    alert(\"This board is unsolvable!\");\r\n                }\r\n            } else if (response.type === \"update\") {\r\n                setBoard(response.board);\r\n            }\r\n        }, true, visualize);\r\n    }\r\n\r\n    /**\r\n     * Clear all cells in this board.\r\n     */\r\n    function clear() {\r\n        setBoard(createNewBoard(size));\r\n    }\r\n\r\n    /**\r\n     * Call when the size of the board has changed. This will resize the displayed board.\r\n     *\r\n     * @param event The click event of the dropdown\r\n     */\r\n    function sizeChange(event) {\r\n        setSize(event.target.value);\r\n        setBoard(createNewBoard(event.target.value));\r\n    }\r\n\r\n    /**\r\n     * Call when the contents of a cell has changed. The contents of the cell may not be the same as value,\r\n     * depending on the formatting rules.\r\n     *\r\n     * @param row The row of the cell.\r\n     * @param col The column of the cell.\r\n     * @param value The new value to be put into the cell.\r\n     */\r\n    function cellChanged(row, col, value) {\r\n        value = value.toString().toUpperCase();\r\n        if (value in charMap) {\r\n            let index = charMap[value];\r\n            if (value === \"\" || (index > 0 && index <= size)) {\r\n                const newBoard = copyBoard(board);\r\n                newBoard[row][col] = value.toString();\r\n                setBoard(newBoard);\r\n            }\r\n        }\r\n    }\r\n\r\n    const disabled = calculating === true ? true : undefined;\r\n\r\n    return (\r\n        <div id=\"content\">\r\n            <div id=\"controls\">\r\n                <div>\r\n                    <select value={size} onChange={sizeChange} disabled={disabled}>\r\n                        {options.map(size => <option key={size} value={size}>{size}x{size}</option>)}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    Visualize Algorithm:\r\n                    <input type=\"checkbox\" onChange={e => setVisualize(e.target.checked)} checked={visualize}\r\n                           disabled={disabled}/>\r\n                </div>\r\n            </div>\r\n            <div id=\"board\">\r\n                {board.map((row, i) => <div className=\"row\" key={i}>{row.map((val, j) => <Cell key={i * size + j}\r\n                                                                                               row={i}\r\n                                                                                               col={j} value={val}\r\n                                                                                               size={size}\r\n                                                                                               cellChanged={cellChanged}\r\n                                                                                               disabled={calculating}/>)}</div>)}\r\n            </div>\r\n            <div id=\"buttons\">\r\n                <button onClick={calculate} disabled={disabled}>Solve!</button>\r\n                <button onClick={createRandomBoard} disabled={disabled}>Generate random board</button>\r\n                <button onClick={clear} disabled={disabled}>Clear board</button>\r\n            </div>\r\n            {calculating ? <div id=\"loading\">Loading...</div> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction App() {\r\n    const [showInstructions, setShowInstructions] = useState(false);\r\n\r\n    let instructionsPanel = null;\r\n    // show the instructions modal if we're supposed to\r\n    if (showInstructions === true) {\r\n        instructionsPanel = (\r\n            <div id=\"instructions-panel\" className=\"panel fade-in\">\r\n                <div id=\"instructions\">\r\n                    <img alt=\"\" src={closeSvg} id=\"close-button\" onClick={() => setShowInstructions(false)}/>\r\n                    <h2>\r\n                        Instructions\r\n                    </h2>\r\n                    <ol>\r\n                        <li>\r\n                            Input your sudoku board 1-9 and A-P representing 10-25 (A: 10, B: 11, C: 12 . . . P: 25)\r\n                        </li>\r\n                        <li>\r\n                            You can optionally click the visualize algorithm button which will show you the board as it\r\n                            is being solved\r\n                            <p className=\"note\">\r\n                                Note: this will significantly slow down the rate at which the board is solved\r\n                            </p>\r\n                        </li>\r\n                        <li>Click solve and the program will present a finished board</li>\r\n                        <li>Clear the Board and start again</li>\r\n                        <p>If you don't want to type in your own puzzle, clicking the \"Generate random board\" button\r\n                            will present you with a puzzle that is guaranteed to be solvable</p>\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <h1>\r\n                    SudoSolve®\r\n                </h1>\r\n                <button id=\"instructions-button\" onClick={() => setShowInstructions(!showInstructions)}>\r\n                    {showInstructions === true ? \"Hide instructions\" : \"Show instructions\"}\r\n                </button>\r\n                {instructionsPanel}\r\n                <div className=\"panel\">\r\n                    <Content/>\r\n                </div>\r\n            </header>\r\n            <div id=\"footer\">\r\n                Made by <a href=\"https://www.github.com/abhaybd\">Abhay Deshpande</a>\r\n                , <a href=\"https://github.com/abx393\">Abhinav Bandari</a>\r\n                , and <a href=\"https://github.com/Karkeys360\">Karthikeya Vemuri</a>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","export default __webpack_public_path__ + \"static/media/x-square-fill.3b574962.svg\";","export default function() {\n  return new Worker(__webpack_public_path__ + \"static/js/solver.worker.4a626272.worker.js\");\n}\n","// Pre-made by CRA\r\nconst reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// Pre-made by CRA\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}